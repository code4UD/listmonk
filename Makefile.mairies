# Makefile pour listmonk-mairies
.PHONY: help build run stop clean logs test dev prod migrate import-sample

# Variables
COMPOSE_FILE = docker-compose.mairies.yml
IMAGE_NAME = listmonk-mairies
VERSION = v1.0.0

# Couleurs pour l'affichage
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(GREEN)Listmonk pour les Mairies Fran√ßaises$(NC)"
	@echo "======================================"
	@echo ""
	@echo "Commandes disponibles :"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""

build: ## Construire l'image Docker
	@echo "$(GREEN)üèóÔ∏è  Construction de l'image Docker...$(NC)"
	@docker build -f Dockerfile.mairies -t $(IMAGE_NAME):$(VERSION) -t $(IMAGE_NAME):latest .
	@echo "$(GREEN)‚úÖ Image construite avec succ√®s !$(NC)"

run: ## Lancer l'application en mode production
	@echo "$(GREEN)üöÄ Lancement en mode production...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Application d√©marr√©e !$(NC)"
	@echo "üåê Interface : http://localhost:9000"

dev: ## Lancer l'application en mode d√©veloppement
	@echo "$(GREEN)üõ†Ô∏è  Lancement en mode d√©veloppement...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) --profile dev up -d
	@echo "$(GREEN)‚úÖ Application d√©marr√©e en mode dev !$(NC)"
	@echo "üåê Interface : http://localhost:9000"
	@echo "üóÑÔ∏è  Adminer : http://localhost:8080"
	@echo "üî¥ Redis Commander : http://localhost:8081"

stop: ## Arr√™ter l'application
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t de l'application...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Application arr√™t√©e !$(NC)"

restart: stop run ## Red√©marrer l'application

clean: ## Nettoyer les conteneurs et volumes
	@echo "$(RED)üßπ Nettoyage des conteneurs et volumes...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√© !$(NC)"

logs: ## Afficher les logs de l'application
	@docker-compose -f $(COMPOSE_FILE) logs -f app

logs-db: ## Afficher les logs de la base de donn√©es
	@docker-compose -f $(COMPOSE_FILE) logs -f db

logs-redis: ## Afficher les logs de Redis
	@docker-compose -f $(COMPOSE_FILE) logs -f redis

logs-all: ## Afficher tous les logs
	@docker-compose -f $(COMPOSE_FILE) logs -f

status: ## Afficher le statut des services
	@echo "$(GREEN)üìä Statut des services :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps

shell: ## Ouvrir un shell dans le conteneur de l'application
	@docker-compose -f $(COMPOSE_FILE) exec app sh

shell-db: ## Ouvrir un shell PostgreSQL
	@docker-compose -f $(COMPOSE_FILE) exec db psql -U listmonk_mairies -d listmonk_mairies

migrate: ## Ex√©cuter les migrations de base de donn√©es
	@echo "$(GREEN)üîÑ Ex√©cution des migrations...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec app ./listmonk --upgrade --yes
	@echo "$(GREEN)‚úÖ Migrations termin√©es !$(NC)"

backup-db: ## Sauvegarder la base de donn√©es
	@echo "$(GREEN)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	@mkdir -p backups
	@docker-compose -f $(COMPOSE_FILE) exec -T db pg_dump -U listmonk_mairies listmonk_mairies > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans le dossier backups/$(NC)"

restore-db: ## Restaurer la base de donn√©es (usage: make restore-db FILE=backup.sql)
	@if [ -z "$(FILE)" ]; then echo "$(RED)‚ùå Veuillez sp√©cifier le fichier : make restore-db FILE=backup.sql$(NC)"; exit 1; fi
	@echo "$(YELLOW)‚ö†Ô∏è  Restauration de la base de donn√©es depuis $(FILE)...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T db psql -U listmonk_mairies -d listmonk_mairies < $(FILE)
	@echo "$(GREEN)‚úÖ Restauration termin√©e !$(NC)"

import-sample: ## Importer les donn√©es d'exemple
	@echo "$(GREEN)üì• Import des donn√©es d'exemple...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec -T db psql -U listmonk_mairies -d listmonk_mairies < scripts/sample-data.sql
	@echo "$(GREEN)‚úÖ Donn√©es d'exemple import√©es !$(NC)"

test-csv: ## Tester l'import CSV avec le fichier d'exemple
	@echo "$(GREEN)üß™ Test d'import CSV...$(NC)"
	@curl -X POST http://localhost:9000/api/geo/import \
		-H "Authorization: Bearer YOUR_TOKEN" \
		-F "file=@examples/mairies-sample.csv" \
		-F "create_subscribers=true"

health: ## V√©rifier la sant√© de l'application
	@echo "$(GREEN)üè• V√©rification de la sant√© des services...$(NC)"
	@curl -f http://localhost:9000/api/health || echo "$(RED)‚ùå Application non accessible$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec db pg_isready -U listmonk_mairies || echo "$(RED)‚ùå Base de donn√©es non accessible$(NC)"
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli ping || echo "$(RED)‚ùå Redis non accessible$(NC)"

update: ## Mettre √† jour l'application
	@echo "$(GREEN)üîÑ Mise √† jour de l'application...$(NC)"
	@git pull origin main
	@make build
	@make stop
	@make run
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e !$(NC)"

setup: ## Configuration initiale compl√®te
	@echo "$(GREEN)üéØ Configuration initiale de listmonk-mairies...$(NC)"
	@if [ ! -f .env ]; then cp .env.example .env; echo "$(YELLOW)‚ö†Ô∏è  Fichier .env cr√©√©. Veuillez le configurer avant de continuer.$(NC)"; exit 1; fi
	@make build
	@make run
	@sleep 10
	@make import-sample
	@echo "$(GREEN)‚úÖ Configuration termin√©e !$(NC)"
	@echo "üåê Acc√©dez √† http://localhost:9000 pour commencer"

install: setup ## Alias pour setup

# Commandes de d√©veloppement
dev-frontend: ## D√©veloppement frontend uniquement
	@echo "$(GREEN)üé® Lancement du d√©veloppement frontend...$(NC)"
	@cd frontend && yarn install && yarn dev

dev-backend: ## D√©veloppement backend uniquement
	@echo "$(GREEN)‚öôÔ∏è  Lancement du d√©veloppement backend...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d db redis
	@echo "Backend dependencies started. Run 'go run ./cmd' to start the application."

# Commandes de monitoring
monitor: ## Surveiller les ressources
	@echo "$(GREEN)üìä Surveillance des ressources...$(NC)"
	@docker stats $(shell docker-compose -f $(COMPOSE_FILE) ps -q)

# Commandes de s√©curit√©
security-scan: ## Scanner les vuln√©rabilit√©s de s√©curit√©
	@echo "$(GREEN)üîí Scan de s√©curit√©...$(NC)"
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		-v $(PWD):/src aquasec/trivy image $(IMAGE_NAME):latest

# Commandes de documentation
docs: ## G√©n√©rer la documentation
	@echo "$(GREEN)üìö G√©n√©ration de la documentation...$(NC)"
	@echo "Documentation disponible dans README-MAIRIES.md"

# Informations syst√®me
info: ## Afficher les informations syst√®me
	@echo "$(GREEN)‚ÑπÔ∏è  Informations syst√®me :$(NC)"
	@echo "Docker version: $(shell docker --version)"
	@echo "Docker Compose version: $(shell docker-compose --version)"
	@echo "Image: $(IMAGE_NAME):$(VERSION)"
	@echo "Compose file: $(COMPOSE_FILE)"
	@echo ""
	@echo "$(GREEN)üìÅ Structure des volumes :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) config --volumes
	@echo ""
	@echo "$(GREEN)üåê Ports expos√©s :$(NC)"
	@docker-compose -f $(COMPOSE_FILE) config --services | xargs -I {} docker-compose -f $(COMPOSE_FILE) port {} 2>/dev/null || true